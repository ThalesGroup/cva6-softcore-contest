// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package axi_vga_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 6;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
    } enable;
    struct packed {
      logic        q;
    } hsync_pol;
    struct packed {
      logic        q;
    } vsync_pol;
  } axi_vga_reg2hw_control_reg_t;

  typedef struct packed {
    logic [7:0]  q;
  } axi_vga_reg2hw_clk_div_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } axi_vga_reg2hw_hori_visible_size_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } axi_vga_reg2hw_hori_front_porch_size_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } axi_vga_reg2hw_hori_sync_size_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } axi_vga_reg2hw_hori_back_porch_size_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } axi_vga_reg2hw_vert_visible_size_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } axi_vga_reg2hw_vert_front_porch_size_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } axi_vga_reg2hw_vert_sync_size_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } axi_vga_reg2hw_vert_back_porch_size_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } axi_vga_reg2hw_start_addr_low_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } axi_vga_reg2hw_start_addr_high_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } axi_vga_reg2hw_frame_size_reg_t;

  typedef struct packed {
    logic [7:0]  q;
  } axi_vga_reg2hw_burst_len_reg_t;

  // Register -> HW type
  typedef struct packed {
    axi_vga_reg2hw_control_reg_t control; // [370:368]
    axi_vga_reg2hw_clk_div_reg_t clk_div; // [367:360]
    axi_vga_reg2hw_hori_visible_size_reg_t hori_visible_size; // [359:328]
    axi_vga_reg2hw_hori_front_porch_size_reg_t hori_front_porch_size; // [327:296]
    axi_vga_reg2hw_hori_sync_size_reg_t hori_sync_size; // [295:264]
    axi_vga_reg2hw_hori_back_porch_size_reg_t hori_back_porch_size; // [263:232]
    axi_vga_reg2hw_vert_visible_size_reg_t vert_visible_size; // [231:200]
    axi_vga_reg2hw_vert_front_porch_size_reg_t vert_front_porch_size; // [199:168]
    axi_vga_reg2hw_vert_sync_size_reg_t vert_sync_size; // [167:136]
    axi_vga_reg2hw_vert_back_porch_size_reg_t vert_back_porch_size; // [135:104]
    axi_vga_reg2hw_start_addr_low_reg_t start_addr_low; // [103:72]
    axi_vga_reg2hw_start_addr_high_reg_t start_addr_high; // [71:40]
    axi_vga_reg2hw_frame_size_reg_t frame_size; // [39:8]
    axi_vga_reg2hw_burst_len_reg_t burst_len; // [7:0]
  } axi_vga_reg2hw_t;

  // Register offsets
  parameter logic [BlockAw-1:0] AXI_VGA_CONTROL_OFFSET = 6'h 0;
  parameter logic [BlockAw-1:0] AXI_VGA_CLK_DIV_OFFSET = 6'h 4;
  parameter logic [BlockAw-1:0] AXI_VGA_HORI_VISIBLE_SIZE_OFFSET = 6'h 8;
  parameter logic [BlockAw-1:0] AXI_VGA_HORI_FRONT_PORCH_SIZE_OFFSET = 6'h c;
  parameter logic [BlockAw-1:0] AXI_VGA_HORI_SYNC_SIZE_OFFSET = 6'h 10;
  parameter logic [BlockAw-1:0] AXI_VGA_HORI_BACK_PORCH_SIZE_OFFSET = 6'h 14;
  parameter logic [BlockAw-1:0] AXI_VGA_VERT_VISIBLE_SIZE_OFFSET = 6'h 18;
  parameter logic [BlockAw-1:0] AXI_VGA_VERT_FRONT_PORCH_SIZE_OFFSET = 6'h 1c;
  parameter logic [BlockAw-1:0] AXI_VGA_VERT_SYNC_SIZE_OFFSET = 6'h 20;
  parameter logic [BlockAw-1:0] AXI_VGA_VERT_BACK_PORCH_SIZE_OFFSET = 6'h 24;
  parameter logic [BlockAw-1:0] AXI_VGA_START_ADDR_LOW_OFFSET = 6'h 28;
  parameter logic [BlockAw-1:0] AXI_VGA_START_ADDR_HIGH_OFFSET = 6'h 2c;
  parameter logic [BlockAw-1:0] AXI_VGA_FRAME_SIZE_OFFSET = 6'h 30;
  parameter logic [BlockAw-1:0] AXI_VGA_BURST_LEN_OFFSET = 6'h 34;

  // Register index
  typedef enum int {
    AXI_VGA_CONTROL,
    AXI_VGA_CLK_DIV,
    AXI_VGA_HORI_VISIBLE_SIZE,
    AXI_VGA_HORI_FRONT_PORCH_SIZE,
    AXI_VGA_HORI_SYNC_SIZE,
    AXI_VGA_HORI_BACK_PORCH_SIZE,
    AXI_VGA_VERT_VISIBLE_SIZE,
    AXI_VGA_VERT_FRONT_PORCH_SIZE,
    AXI_VGA_VERT_SYNC_SIZE,
    AXI_VGA_VERT_BACK_PORCH_SIZE,
    AXI_VGA_START_ADDR_LOW,
    AXI_VGA_START_ADDR_HIGH,
    AXI_VGA_FRAME_SIZE,
    AXI_VGA_BURST_LEN
  } axi_vga_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] AXI_VGA_PERMIT [14] = '{
    4'b 0001, // index[ 0] AXI_VGA_CONTROL
    4'b 0001, // index[ 1] AXI_VGA_CLK_DIV
    4'b 1111, // index[ 2] AXI_VGA_HORI_VISIBLE_SIZE
    4'b 1111, // index[ 3] AXI_VGA_HORI_FRONT_PORCH_SIZE
    4'b 1111, // index[ 4] AXI_VGA_HORI_SYNC_SIZE
    4'b 1111, // index[ 5] AXI_VGA_HORI_BACK_PORCH_SIZE
    4'b 1111, // index[ 6] AXI_VGA_VERT_VISIBLE_SIZE
    4'b 1111, // index[ 7] AXI_VGA_VERT_FRONT_PORCH_SIZE
    4'b 1111, // index[ 8] AXI_VGA_VERT_SYNC_SIZE
    4'b 1111, // index[ 9] AXI_VGA_VERT_BACK_PORCH_SIZE
    4'b 1111, // index[10] AXI_VGA_START_ADDR_LOW
    4'b 1111, // index[11] AXI_VGA_START_ADDR_HIGH
    4'b 1111, // index[12] AXI_VGA_FRAME_SIZE
    4'b 0001  // index[13] AXI_VGA_BURST_LEN
  };

endpackage

